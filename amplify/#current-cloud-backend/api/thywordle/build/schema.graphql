
type GameStatistics @aws_iam @aws_cognito_user_pools @aws_api_key {
  id: ID!
  winDistribution: Int
  gamesFailed: Int
  currentStreak: Int
  bestStreak: Int
  totalGames: Int
  successRate: Int
  userID: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelGameStatisticsConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [GameStatistics]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelGameStatisticsFilterInput {
  id: ModelIDInput
  winDistribution: ModelIntInput
  gamesFailed: ModelIntInput
  currentStreak: ModelIntInput
  bestStreak: ModelIntInput
  totalGames: ModelIntInput
  successRate: ModelIntInput
  userID: ModelIDInput
  and: [ModelGameStatisticsFilterInput]
  or: [ModelGameStatisticsFilterInput]
  not: ModelGameStatisticsFilterInput
}

type Query {
  getGameStatistics(id: ID!): GameStatistics @aws_api_key @aws_iam @aws_cognito_user_pools
  listGameStatistics(filter: ModelGameStatisticsFilterInput, limit: Int, nextToken: String): ModelGameStatisticsConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  syncGameStatistics(filter: ModelGameStatisticsFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelGameStatisticsConnection @aws_api_key @aws_iam @aws_cognito_user_pools
}

input ModelGameStatisticsConditionInput {
  winDistribution: ModelIntInput
  gamesFailed: ModelIntInput
  currentStreak: ModelIntInput
  bestStreak: ModelIntInput
  totalGames: ModelIntInput
  successRate: ModelIntInput
  userID: ModelIDInput
  and: [ModelGameStatisticsConditionInput]
  or: [ModelGameStatisticsConditionInput]
  not: ModelGameStatisticsConditionInput
}

input CreateGameStatisticsInput {
  id: ID
  winDistribution: Int
  gamesFailed: Int
  currentStreak: Int
  bestStreak: Int
  totalGames: Int
  successRate: Int
  userID: ID
  _version: Int
}

input UpdateGameStatisticsInput {
  id: ID!
  winDistribution: Int
  gamesFailed: Int
  currentStreak: Int
  bestStreak: Int
  totalGames: Int
  successRate: Int
  userID: ID
  _version: Int
}

input DeleteGameStatisticsInput {
  id: ID!
  _version: Int
}

type Mutation {
  createGameStatistics(input: CreateGameStatisticsInput!, condition: ModelGameStatisticsConditionInput): GameStatistics @aws_api_key @aws_iam @aws_cognito_user_pools
  updateGameStatistics(input: UpdateGameStatisticsInput!, condition: ModelGameStatisticsConditionInput): GameStatistics @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteGameStatistics(input: DeleteGameStatisticsInput!, condition: ModelGameStatisticsConditionInput): GameStatistics @aws_api_key @aws_iam @aws_cognito_user_pools
}

input ModelSubscriptionGameStatisticsFilterInput {
  id: ModelSubscriptionIDInput
  winDistribution: ModelSubscriptionIntInput
  gamesFailed: ModelSubscriptionIntInput
  currentStreak: ModelSubscriptionIntInput
  bestStreak: ModelSubscriptionIntInput
  totalGames: ModelSubscriptionIntInput
  successRate: ModelSubscriptionIntInput
  userID: ModelSubscriptionIDInput
  and: [ModelSubscriptionGameStatisticsFilterInput]
  or: [ModelSubscriptionGameStatisticsFilterInput]
}

type Subscription {
  onCreateGameStatistics(filter: ModelSubscriptionGameStatisticsFilterInput): GameStatistics @aws_subscribe(mutations: ["createGameStatistics"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateGameStatistics(filter: ModelSubscriptionGameStatisticsFilterInput): GameStatistics @aws_subscribe(mutations: ["updateGameStatistics"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteGameStatistics(filter: ModelSubscriptionGameStatisticsFilterInput): GameStatistics @aws_subscribe(mutations: ["deleteGameStatistics"]) @aws_api_key @aws_iam @aws_cognito_user_pools
}

